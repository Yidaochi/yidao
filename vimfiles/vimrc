" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.

filetype on
"=============================================================
"=============================================================
"set color
"colorscheme desert
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8

colorscheme molokai
set guifont=Ubuntu\ Mono\ 14    "14
"=============================================================
" set windows
"set lines=30 columns=105
set noimdisable
"=============================================================
set backspace=2            "
set nobackup               "
set nowritebackup
set noswapfile             "
set noundofile             "
set autochdir              "
set cursorcolumn           "
set cursorline             "
set nu                     "
"set nowrap                "
set wrap                   "
set linebreak              "
set guioptions-=T          "
set tabstop=2	           "set tab=2space
set expandtab
set autoread
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}\ %{ALEGetStatusLine()}
"=============================================================
"
set hlsearch               "
set incsearch              "
set ignorecase             "
"=============================================================
"
syntax enable 	           "
syntax on                  "
set ai                     "
set shiftwidth=2
set showmatch              "
set guicursor+=a:blinkon0  "
set autoindent             "
"=============================================================
"set plugins(cha jian)
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Bundle 'VundleVim/Vundle.vim'
Bundle 'valloric/youcompleteme'
let g:ycm_global_ycm_extra_conf = '/home/ly/.vim/bundle/youcompleteme/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
set completeopt=longest,menu
"自动开启语义补全
let g:ycm_seed_identifiers_with_syntax = 1
"在注释中也开启补全
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
"字符串中也开启补全
let g:ycm_complete_in_strings = 1
"开始补全的字符数
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_autoclose_preview_window_after_completion = 1
"禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"与syntastic有冲突，建议关闭
let g:ycm_show_diagnostics_ui = 0
"let g:ycm_error_symbol = '>>'
"let g:ycm_warning_symbol = '>>'
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_echo_current_diagnostic = 0

Bundle 'dense-analysis/ale'
"始终开启标志列
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
"自定义error和warning图标
let g:ale_sign_error = '✗ '
let g:ale_sign_warning = '⚡'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"文件内容发生变化时不进行检查
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
"前、后一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap np <Plug>(ale_next_wrap)

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"=============================================================
"add head info when touch a new file
"新建.c,.h,.sh,.java,.v文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java,*.v,*.py exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
	if &filetype == 'sh' 
		call setline(1, "#!/bin/bash")
		call append(line("."), "#==========================================================================") 
		call append(line(".")+1, "#  File Name: ".expand("%")) 
		call append(line(".")+2, "#  Author: Yidaoliu") 
		call append(line(".")+3, "#  Mail:") 
		call append(line(".")+4, "#  Created Time: ".strftime("%Y-%m-%d")) 
		call append(line(".")+5, "#  Function:") 
		call append(line(".")+6, "#==========================================================================") 
		call append(line(".")+7, "")
  elseif &filetype == 'python' 
		call setline(1, "#!/usr/bin/python3")
		call append(line("."), "#==========================================================================") 
		call append(line(".")+1, "#  File Name: ".expand("%")) 
		call append(line(".")+2, "#  Author: Yidaoliu") 
		call append(line(".")+3, "#  Mail:") 
		call append(line(".")+4, "#  Created Time: ".strftime("%Y-%m-%d")) 
		call append(line(".")+5, "#  Function:") 
		call append(line(".")+6, "#==========================================================================") 
		call append(line(".")+7, "")
  elseif &filetype == 'verilog' 
		call setline(1, "//==========================================================================")
		call append(line("."),   "//  File Name: ".expand("%")) 
		call append(line(".")+1, "//  Author: Yidaoliu") 
		call append(line(".")+2, "//  Mail:") 
		call append(line(".")+3, "//  Date: ".strftime("%Y-%m-%d")) 
		call append(line(".")+4, "//  Function:") 
		call append(line(".")+5, "//    ")
		call append(line(".")+6, "//  History:") 
		call append(line(".")+7, "//    ".strftime("%Y-%m-%d")."  Initial version") 
		call append(line(".")+8, "//==========================================================================") 
		call append(line(".")+9, "")
	else 
		call setline(1, "/*************************************************************************") 
		call append(line("."), "	> File Name: ".expand("%")) 
		call append(line(".")+1, "	> Author: Yidaoliu") 
		call append(line(".")+2, "	> Mail:") 
		call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
		call append(line(".")+4, " ************************************************************************/") 
		call append(line(".")+5, "")
	endif
	if &filetype == 'cpp'
		call append(line(".")+6, "#include<iostream>")
    	call append(line(".")+7, "using namespace std;")
		call append(line(".")+8, "")
	endif
	if &filetype == 'c'
		call append(line(".")+6, "#include<stdio.h>")
		call append(line(".")+7, "")
	endif
	"	if &filetype == 'java'
	"		call append(line(".")+6,"public class ".expand("%"))
	"		call append(line(".")+7,"")
	"	endif
    normal G
endfunc
